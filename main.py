import os
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
class UserData(StatesGroup):
    height = State()
    weight = State()
    style = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await UserData.height.set()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –æ–¥–µ–∂–¥—É. –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç (–≤ —Å–º)?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞
@dp.message_handler(state=UserData.height)
async def process_height(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("üìè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 170)!")
        return
    
    async with state.proxy() as data:
        data["height"] = int(message.text)
    
    await UserData.next()
    await message.answer("‚öñÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞
@dp.message_handler(state=UserData.weight)
async def process_weight(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("‚öñÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 65)!")
        return
    
    async with state.proxy() as data:
        data["weight"] = int(message.text)
    
    await UserData.next()
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    style_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    styles = ["üëî –ö–ª–∞—Å—Å–∏–∫–∞", "üèÉ –°–ø–æ—Ä—Ç", "üëñ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π", "üõπ –£–ª–∏—á–Ω—ã–π"]
    style_keyboard.add(*styles)
    await message.answer("üé® –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:", reply_markup=style_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
@dp.message_handler(state=UserData.style)
async def process_style(message: types.Message, state: FSMContext):
    style_map = {
        "üëî –ö–ª–∞—Å—Å–∏–∫–∞": "classic",
        "üèÉ –°–ø–æ—Ä—Ç": "sport",
        "üëñ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π": "casual",
        "üõπ –£–ª–∏—á–Ω—ã–π": "street"
    }
    
    style = style_map.get(message.text)
    if not style:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!")
        return
    
    async with state.proxy() as data:
        data["style"] = style
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = await asyncpg.connect(os.getenv("DATABASE_URL"))
        await conn.execute(
            "INSERT INTO users (user_id, height, weight, style) VALUES ($1, $2, $3, $4)",
            message.from_user.id, data["height"], data["weight"], data["style"]
        )
        await conn.close()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
        await message.answer(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"üìè –†–æ—Å—Ç: {data['height']} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å: {data['weight']} –∫–≥\n"
            f"üé® –°—Ç–∏–ª—å: {message.text}\n\n"
            f"–í–æ—Ç —Ç–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [–∑–¥–µ—Å—å –±—É–¥—É—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–¥–µ–∂–¥—É]",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    await state.finish()

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp)
